<?php
defined('BASEPATH') or exit('No direct script access allowed');
include APPPATH . '/libraries/CommonTrait.php';
require_once APPPATH . '/interfaces/AdhaarSignProcess.php';
require_once $_SERVER["DOCUMENT_ROOT"] . "/" . CHITHA_APP_NAME . "esign/library/XMLSecurityDSig.php";
require_once $_SERVER["DOCUMENT_ROOT"] . "/" . CHITHA_APP_NAME . "esign/library/XMLSecurityKey.php";
require_once $_SERVER["DOCUMENT_ROOT"] . "/" . CHITHA_APP_NAME . "esign/TCPDF/tcpdf.php";

class AdhaarSignController extends CI_Controller implements AdhaarSignProcess
{
    use CommonTrait;

    const AADHAAR_CONSENT_CONTENT = ' <p>I hereby give my consent for using my identity and address data received from e-KYC provider to generate and submit the electronic DSC application form to CA, creation of key pairs by ESP on my behalf, submission of certificate to CA for certification, one time creation of signature on the hash along with this request, deletion of key pairs after applyingsignature(s). I have noobjection in the use of my ID for authenticating myself with Aadhaar based authentication system for the purposes of availing of the eCabinet from Home & Political Department, Government of Assam. I understand that the Biometrics and/or OTP I provide for authentication shall be used only for authenticating my identity through the Aadhaar Authentication system, for obtaining my e-KYC through Aadhaar e-KYC service and for the issuance of Digital Signature Certificate (DSC) for this specific transaction and for no other purposes.For the creation of DSC, I understand that the options that I have chosen are the ones that shall be populated in the DSC generated by the CA and I provide my consent for the same. I also understand that the following fields in the DSC generated by the CA are mandatory and I give my consent for using the Aadhaar provided e-KYC information to populate the corresponding fields in the DSC.</p><p>Common Name (name as obtained from e-KYC), Unique Identifier (UID Token), Pseudonym (unique code sent by UIDAI in e-KYC response), State or Province (state as obtained from e-KYC), Postal Code (postal code as obtained from e-KYC)</p>';

    const AADHAAR_CONSENT_CHECKBOX_TEXT = 'I understand that Home & Political Department, Government of Assam shall ensure security and confidentiality of my personal identity data provided for the purpose of Aadhaar based authentication.';

    public $SIGN_NAME;
    public $SIGN_COR_X = 200;
    public $SIGN_COR_Y = 200;
    public $PDF_PATH;
    public $FILE_NAME_WO_EXT;
    public $PROPOSAL_NO;
    public $SIGN_USER_NAME;
    public $SIGN;
    public $DIST_CODE;
    public $SUBDIV_CODE;
    public $CIR_CODE;
    public $USER_CODE;
    public $NC_MAP_ID;
    public $NC_PROPOSAL_CASE_NO_ARR;

    function __construct()
    {
        parent::__construct();
        $this->load->helper('language');
        $this->lang->load("assamese", "assamese");
        $this->setConfig();
        $this->load->model('NcVillageModel');
    }
    public function setConfig()
    {
        $this->SIGN_NAME = $this->input->post('sign_name');
        $this->SIGN_COR_X = $this->input->post('sign_x');
        $this->SIGN_COR_Y = $this->input->post('sign_y');
        $this->SIGN_NAME = $this->input->post('sign_name');
        $this->USER_CODE = $this->session->userdata('user_code');
        $this->DIST_CODE = $this->session->userdata('dist_code');
        $this->SUBDIV_CODE = $this->session->userdata('subdiv_code');
        $this->CIR_CODE = $this->session->userdata('cir_code');
        $user_desig_code = $this->session->userdata('user_desig_code');

        if ($this->SIGN_NAME == 'nc_proposal') {
            $this->PDF_PATH = FCPATH . NC_VILLAGE_PROPOSAL_DIR . 'co' . '/' . $this->session->userdata('proposal_file_name') . '.pdf';
            $this->FILE_NAME_WO_EXT = $this->session->userdata('proposal_file_name'); //FILE NAME WITHOUT EXTENSION
            $this->PROPOSAL_NO = $this->session->userdata('proposal_file_name'); //FILE NAME WITHOUT EXTENSION
            $this->NC_PROPOSAL_CASE_NO_ARR = $this->session->userdata('proposal_case_nos'); //PROPOSAL CASE NOS IN ARRAY
            if ($user_desig_code == 'CO') {
                $this->dbswitch($this->DIST_CODE);
                $user = $this->db->query("select * from users where dist_code=? and subdiv_code=? and cir_code=? and user_code=? and user_desig_code='CO'", [$this->DIST_CODE, $this->SUBDIV_CODE, $this->CIR_CODE, $this->USER_CODE])->row();
                if (!$user || !$user->username) {
                    echo json_encode(['status' => 500, 'data' => 'User/User Name not found.']);
                    return;
                    die;
                } else {
                    $this->SIGN_USER_NAME = $user->username;
                }
            }
            $this->SIGN = 'Digitally Signed by: ' . $this->SIGN_USER_NAME .  "\n" . 'Date: ' . date('d-m-Y') . "\n" . date('h:i a');
        } else if ($this->SIGN_NAME == 'nc_map_sign') {
            $this->PDF_PATH = FCPATH  . $this->session->userdata('map_dir_path');
            $this->FILE_NAME_WO_EXT = $this->session->userdata('map_file_name'); //FILE NAME WITHOUT EXTENSION
            $this->NC_MAP_ID = $this->input->post('nc_map_id');
            if ($user_desig_code == 'DC') {
                $this->dbswitch($this->DIST_CODE);
                // $user = $this->db->query("select * from users where dist_code=? and subdiv_code=? and cir_code=? and user_code=? and user_desig_code='DC'", [$this->DIST_CODE, $this->SUBDIV_CODE, $this->CIR_CODE, $this->USER_CODE])->row();
                $user = $this->db->query("select * from users where dist_code=? and subdiv_code=? and cir_code=? and user_code=? and user_desig_code='DC'", [$this->DIST_CODE, '00', '00', $this->USER_CODE])->row();
                $this->SIGN_USER_NAME = $user->username;
            }
            $this->SIGN = 'Digitally Signed by: ' . $this->SIGN_USER_NAME . "\n" . 'Date: ' . date('d-m-Y') . "\n" . date('h:i a');
        }
    }
    public function esignProcess()
    {
        if (!$this->SIGN_USER_NAME) {
            echo json_encode(['status' => 500, 'data' => 'User/User Name not found.']);
            return;
            die;
        } else {
            $o_pref = $this->input->post('o_pref');
            $getParams = [
                'sign_name' => $this->SIGN_NAME,
                'dist_code' => $this->DIST_CODE,
                'subdiv_code' => $this->SUBDIV_CODE,
                'cir_code' => $this->CIR_CODE,
                'user_code' => $this->USER_CODE,
                'proposal_no' => $this->PROPOSAL_NO,
                'date_of_sign' => date('Y-m-d'),
                'time_of_sign' => date('H:i:s'),
                'file_name_wo_ext' => $this->FILE_NAME_WO_EXT,
                'file_path' => $this->PDF_PATH,
                'case_nos_arr' => $this->NC_PROPOSAL_CASE_NO_ARR,
                'o_pref' => (isset($_POST['o_pref']) && $_POST['o_pref']!='') ? $o_pref : '',
                'auth_sess' => json_encode($this->session->userdata)
            ];
            if ($this->SIGN_NAME == 'nc_map_sign') {
                $getParams['nc_map_id'] = $this->NC_MAP_ID;
            }
            $getParams_encoded = urlencode(base64_encode(openssl_encrypt(json_encode($getParams), "AES-128-CTR", "singleENCRYPT", 0, "1234567893032221")));

            //$file = file_get_contents(FILE_NAME); //binary value
            if($o_pref == 'L') {
                $pdf = new TCPDF($o_pref, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            else {
                $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            // $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            // $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, false, 'ISO-8859-1', false);



            // IMAGICK
            $imagick = new Imagick();
            $imagick->setBackgroundColor(new ImagickPixel('transparent'));
            // $imagick->setResolution(288, 288);
            $imagick->setResolution(288, 288);
            $imagick->readImage($this->PDF_PATH); //$imagick can read pdf and image too

            //get file name only w/o ext.

            $num_pages = $imagick->getNumberImages();
            // Convert PDF pages to images
            for ($i = 0; $i < $num_pages; $i++) {
                $imagick->setIteratorIndex($i);
                $imagick->setImageFormat('jpeg');
                $imagick->stripImage();
                $imagick->writeImage(ESIGN_TMP_DIR . $this->FILE_NAME_WO_EXT . '-' . $i . '.jpg');
            }
            $imagick->destroy();





            // TCPDF
            // set certificate file
            $info = array();
            for ($i = 0; $i < $num_pages; $i++) {
                // set document signature
                $pdf->my_set_sign('', '', '', '', 2, $info); //custom function TCPDF  library tcpdf.php
                $pdf->AddPage();
                $pdf->Image(ESIGN_TMP_DIR . $this->FILE_NAME_WO_EXT . '-' . $i . '.jpg');
                // $pdf->SetFont('times', '', 8);
                $pdf->setCellPaddings(0, 0, 0, 0);
                $bMargin = 0;
                // $auto_page_break = $pdf->getAutoPageBreak();
                // $pdf->SetAutoPageBreak(false, 0);
                $pdf->setPageMark();
                // $pdf->setCellPaddings(0, 0, 0, 0);
                $pdfPageCount = $i + 1;
                $pdf->setPage(($pdfPageCount), true);

                $font_size = 8;
                $pdf->SetFont('freeserif', '', $font_size, '', false);
                
                if($o_pref == 'L') {
                    $pdf->setSignatureAppearance(65, 160, 35, 17, $num_pages, $this->SIGN_USER_NAME); //X,Y,Width,Height
                    $pdf->MultiCell(35, 10, $this->SIGN, 0, '', 0, 1, 92, 160, true); //8th and 9th params are co ordinate of x and y resp
                }
                else {
                    $pdf->setSignatureAppearance(3, 255, 35, 17, $num_pages, $this->SIGN_USER_NAME); //X,Y,Width,Height
                    $pdf->MultiCell(35, 10, $this->SIGN, 0, '', 0, 1, 30, 255, true); //8th and 9th params are co ordinate of x and y resp
                }
            }
            $doc_path = ESIGN_TMP_DIR . 'unsigned-' . $this->FILE_NAME_WO_EXT . '.pdf';
            $file = $pdf->my_output($doc_path, 'F'); //F-Force download, S-Source buffer returns binary, reffer my_output function from tcpdf.php file
            $pdf_byte_range = $pdf->pdf_byte_range;
            $pdf->_destroy();
            //FILE_HASH
            $file_hash = hash_file('sha256', $doc_path);
            //after pdf done using images, delete that temp images from folder.
            for ($i = 0; $i < $num_pages; $i++) {
                unlink(ESIGN_TMP_DIR . $this->FILE_NAME_WO_EXT . '-' . $i . '.jpg'); //remove images after PDF generated/converted from temp folder
            }

            //DOC PREPARATION AND SAVE
            $doc = new DOMDocument();
            //randome number gerator rand(1,9)
            $txn = rand(111111111111, 999999999999) . '----' . $pdf_byte_range; //$pdf_byte_range signiture space location
            $ts = date('Y-m-d\TH:i:s');
            // $doc_info = FILE_NAME;
            $xmlstr = '<Esign AuthMode="1" aspId="' . ASPID . '" ekycId="" ekycIdType="A" responseSigType="pkcs7" responseUrl="' . base_url() . 'index.php/' . ESIGN_RESPONSE_URL . '?param=' . $getParams_encoded . '" sc="y" ts="' . $ts . '" txn="' . $txn . '" ver="2.1"><Docs><InputHash docInfo="' . $txn . '" hashAlgorithm="SHA256" id="1">' . $file_hash . '</InputHash></Docs></Esign>';
            $doc->loadXML($xmlstr); //parser
            // Create a new Security object 
            $objDSig = new RobRichards\XMLSecLibs\XMLSecurityDSig();
            // Use the c14n exclusive canonicalization
            $objDSig->setCanonicalMethod(RobRichards\XMLSecLibs\XMLSecurityDSig::C14N);
            // Sign using SHA-256
            $objDSig->addReference(
                $doc,
                RobRichards\XMLSecLibs\XMLSecurityDSig::SHA1,
                array('http://www.w3.org/2000/09/xmldsig#enveloped-signature'),
                array('force_uri' => true)
            );
            // Create a new (private) Security key
            $objKey = new RobRichards\XMLSecLibs\XMLSecurityKey(RobRichards\XMLSecLibs\XMLSecurityKey::RSA_SHA1, array('type' => 'private'));
            //If key has a passphrase, set it using
            $objKey->passphrase = '';
            // Load the private key
            $objKey->loadKey(PRIVATEKEY, TRUE);
            // Sign the XML file
            $objDSig->sign($objKey);
            // Append the signature to the XML
            $objDSig->appendSignature($doc->documentElement);
            $signXML = $doc->saveXML();
            $signXML = str_replace('<?xml version="1.0"?>', '', $signXML);
            ob_end_clean();
            $data['esign_request'] = $signXML;
            $data['txn_id'] = $txn;
            $data['esign_url'] = ESIGN_URL;
            echo json_encode(['status' => 200, 'data' => $data]);
        }
    }
    public function esignResponse()
    {
        $getParams = $_GET['param'];
        $params = json_decode(openssl_decrypt(base64_decode(urldecode($getParams)), "AES-128-CTR", "singleENCRYPT", 0, '1234567893032221'));
        $unsigned_file_path = ESIGN_TMP_DIR . 'unsigned-' . $params->file_name_wo_ext . '.pdf';
        $signed_file_path = $params->file_path;

        $errMsg = "";
        $xmldata = (array) simplexml_load_string(filter_input(INPUT_POST, 'eSignResponse')) or die("Failed to load");
        if ($xmldata["@attributes"]["errCode"] != 'NA') {
            $errCode = $xmldata["@attributes"]["errCode"];
            if (isset($xmldata["@attributes"]["errMsg"])) {
                $msg = $xmldata["@attributes"]["errMsg"];
                $errMsg = $msg;
            } else {
                $msg = 'eSign Request Cancelled.[#' . $errCode . ']';
                $errMsg = $msg;
            }
        }
        if ($errMsg) {
            log_message("error", 'invalid signed pdf ');
            $this->load->view('esign/error');
            return;
        } else {
            // header('Content-Type: application/pdf');
            $unsigned_file = file_get_contents($unsigned_file_path);
            if ($unsigned_file === false) {
                log_message("error", 'could not save the signed map in ilrms server ');
                $this->load->view('esign/error');
                return;
            }
            $txn = $xmldata["@attributes"]["txn"];
            $txn_array = explode('----', $txn);
            $pdf_byte_range = $txn_array[1];

            $pkcs7 = (array) $xmldata['Signatures'];
            $pkcs7_value = $pkcs7['DocSignature'];
            $cer_value = $xmldata['UserX509Certificate'];


            $beginpem = "-----BEGIN CERTIFICATE-----\n";
            $endpem = "-----END CERTIFICATE-----\n";
            $pemdata = $beginpem . trim($cer_value) . "\n" . $endpem;

            $cert_data = openssl_x509_parse($pemdata);

            if($params->o_pref != '') {
                $pdf = new TCPDF($params->o_pref, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            else {
                $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            // $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, false, 'ISO-8859-1', false);

            $file = $pdf->my_output($signed_file_path, 'F', $unsigned_file, $cer_value, $pkcs7_value, true, $pdf_byte_range);
            $pdf->_destroy();
            if (file_exists($unsigned_file_path)) {
                unlink($unsigned_file_path);
            }
            // header_remove('Content-Type');
            // header('Content-Type: text/html');
            $this->esignSuccess($params, $xmldata);
        }
    }
    public function esignSuccess($params, $xmldata)
    {
        $sign_name = $params->sign_name;

        $dist_code = $params->dist_code;
        $subdiv_code = $params->subdiv_code;
        $cir_code = $params->cir_code;
        $proposal_no = $params->proposal_no;
        $user_code = $params->user_code;
        $case_nos_arr = (array) $params->case_nos_arr;

        $auth_sess = json_decode($params->auth_sess, true);
        $this->session->set_userdata($auth_sess);
        
        $this->dbswitch($dist_code);
        if ($sign_name == 'nc_proposal') {
            $is_exists = $this->db->get_where('nc_village_proposal', ['proposal_no' => $proposal_no])->num_rows();
            $this->db->trans_begin();
            if ($is_exists) {
                $this->db->where('proposal_no', $proposal_no)
                    ->update('nc_village_proposal', array(
                        'user_code' => $user_code,
                        'dist_code' => $dist_code,
                        'subdiv_code' => $subdiv_code,
                        'user_type' => 'CO',
                        'sign_key' => json_encode($xmldata),
                        'updated_at' => date('Y-m-d H:i:s'),
                        'status' => 'A'
                    ));
            } else {
                $this->db->insert('nc_village_proposal', array(
                    'proposal_no' => $proposal_no,
                    'user_code' => $user_code,
                    'dist_code' => $dist_code,
                    'subdiv_code' => $subdiv_code,
                    'cir_code' => $cir_code,
                    'user_type' => 'CO',
                    'sign_key' => json_encode($xmldata),
                    'updated_at' => date('Y-m-d H:i:s'),
                    'created_at' => date('Y-m-d H:i:s'),
                    'status' => 'A'
                ));

                $lastid = $this->db->insert_id();

                $this->db->where('dist_code', $dist_code)
                    ->where('subdiv_code', $subdiv_code)
                    ->where('cir_code', $cir_code)
                    ->where('status', 'O')
                    ->where_in('application_no', $case_nos_arr)
                    ->update('nc_villages', array('status' => 'G', 'co_proposal' => 'Y', 'proposal_id' => $lastid));
            }
            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                log_message("error", 'NC_Village_CO_PROPOSAL_Update: ' . json_encode('#NCPROP0001 Unable to update data.'));
                $this->load->view('esign/error');
            } else {
                $this->db->trans_commit();
                $data['file_path'] = base_url() . NC_VILLAGE_PROPOSAL_DIR . 'co/' . $proposal_no . '.pdf';
                $this->load->view('esign/view_signed_pdf', $data);
            }
        } else if ($sign_name == 'nc_map_sign') {
            $nc_map_id = $params->nc_map_id;
            $mainfile = file_get_contents($params->file_path);
            $pdfbase = base64_encode($mainfile);
            if ($pdfbase) {
                $url = API_LINK_ILRMS . "index.php/nc_village/NcCommonController/storeSignedMap";
                $method = 'POST';
                $data = ['id' => $nc_map_id, 'sign_key' => json_encode($xmldata), 'pdfbase' => $pdfbase];
                $output = callIlrmsApi($url, $method, $data);
                $output = true;
                if (!$output) {
                    log_message("error", 'could not save the signed map in ilrms server ');
                    $this->load->view('esign/error');
                } else {
                    $data['file_path'] = base_url()  . 'index.php/nc_village/NcVillageDcController/viewUploadedMap?id=' . $nc_map_id;
                    // $data['file_path'] = false;
                    $this->load->view('esign/view_signed_pdf', $data);
                }
            } else {
                log_message("error", 'could not fetch the signed map');
                $this->load->view('esign/error');
            }
        }
    }
    
    public function esignProcessNew()
    {
        if (!$this->SIGN_USER_NAME) {
            echo json_encode(['status' => 500, 'data' => 'User/User Name not found.']);
            return;
            die;
        } else {
            $o_pref = $this->input->post('o_pref');
            $user = $this->input->post('user');

            if ($this->SIGN_NAME == 'nc_proposal') {
                if(empty($user)){
                    echo json_encode(['status' => 500, 'data' => 'Please select forward to user']);
                    return;
                }
            }else{
                $user = '';
            }
            $getParams = [
                'sign_name' => $this->SIGN_NAME,
                'dist_code' => $this->DIST_CODE,
                'subdiv_code' => $this->SUBDIV_CODE,
                'cir_code' => $this->CIR_CODE,
                'user_code' => $this->USER_CODE,
                'proposal_no' => $this->PROPOSAL_NO,
                'date_of_sign' => date('Y-m-d'),
                'time_of_sign' => date('H:i:s'),
                'file_name_wo_ext' => $this->FILE_NAME_WO_EXT,
                'file_path' => $this->PDF_PATH,
                'case_nos_arr' => $this->NC_PROPOSAL_CASE_NO_ARR,
                'to_user' => $user,
                'o_pref' => (isset($_POST['o_pref']) && $_POST['o_pref']!='') ? $o_pref : '',
                'auth_sess' => json_encode($this->session->userdata)
            ];
            if ($this->SIGN_NAME == 'nc_map_sign') {
                $getParams['nc_village_id'] = $this->input->post('nc_village_id');
                $getParams['nc_map_id'] = $this->NC_MAP_ID;
            }
            $getParams_encoded = urlencode(base64_encode(openssl_encrypt(json_encode($getParams), "AES-128-CTR", "singleENCRYPT", 0, "1234567893032221")));

            //$file = file_get_contents(FILE_NAME); //binary value
            if($o_pref == 'L') {
                $pdf = new TCPDF($o_pref, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            else {
                $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            // $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            // $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, false, 'ISO-8859-1', false);



            // IMAGICK
            $imagick = new Imagick();
            $imagick->setBackgroundColor(new ImagickPixel('transparent'));
            // $imagick->setResolution(288, 288);
            $imagick->setResolution(288, 288);
            $imagick->readImage($this->PDF_PATH); //$imagick can read pdf and image too

            //get file name only w/o ext.

            $num_pages = $imagick->getNumberImages();
            // Convert PDF pages to images
            for ($i = 0; $i < $num_pages; $i++) {
                $imagick->setIteratorIndex($i);
                $imagick->setImageFormat('jpeg');
                $imagick->stripImage();
                $imagick->writeImage(ESIGN_TMP_DIR . $this->FILE_NAME_WO_EXT . '-' . $i . '.jpg');
            }
            $imagick->destroy();





            // TCPDF
            // set certificate file
            $info = array();
            for ($i = 0; $i < $num_pages; $i++) {
                // set document signature
                $pdf->my_set_sign('', '', '', '', 2, $info); //custom function TCPDF  library tcpdf.php
                $pdf->AddPage();
                $pdf->Image(ESIGN_TMP_DIR . $this->FILE_NAME_WO_EXT . '-' . $i . '.jpg');
                // $pdf->SetFont('times', '', 8);
                $pdf->setCellPaddings(0, 0, 0, 0);
                $bMargin = 0;
                // $auto_page_break = $pdf->getAutoPageBreak();
                // $pdf->SetAutoPageBreak(false, 0);
                $pdf->setPageMark();
                // $pdf->setCellPaddings(0, 0, 0, 0);
                $pdfPageCount = $i + 1;
                $pdf->setPage(($pdfPageCount), true);

                $font_size = 8;
                $pdf->SetFont('freeserif', '', $font_size, '', false);
                
                if($o_pref == 'L') {
                    $pdf->setSignatureAppearance(65, 160, 35, 17, $num_pages, $this->SIGN_USER_NAME); //X,Y,Width,Height
                    $pdf->MultiCell(35, 10, $this->SIGN, 0, '', 0, 1, 92, 160, true); //8th and 9th params are co ordinate of x and y resp
                }
                else {
                    $pdf->setSignatureAppearance(3, 255, 35, 17, $num_pages, $this->SIGN_USER_NAME); //X,Y,Width,Height
                    $pdf->MultiCell(35, 10, $this->SIGN, 0, '', 0, 1, 30, 255, true); //8th and 9th params are co ordinate of x and y resp
                }
            }
            $doc_path = ESIGN_TMP_DIR . 'unsigned-' . $this->FILE_NAME_WO_EXT . '.pdf';
            $file = $pdf->my_output($doc_path, 'F'); //F-Force download, S-Source buffer returns binary, reffer my_output function from tcpdf.php file
            $pdf_byte_range = $pdf->pdf_byte_range;
            $pdf->_destroy();
            //FILE_HASH
            $file_hash = hash_file('sha256', $doc_path);
            //after pdf done using images, delete that temp images from folder.
            for ($i = 0; $i < $num_pages; $i++) {
                unlink(ESIGN_TMP_DIR . $this->FILE_NAME_WO_EXT . '-' . $i . '.jpg'); //remove images after PDF generated/converted from temp folder
            }

            //DOC PREPARATION AND SAVE
            $doc = new DOMDocument();
            //randome number gerator rand(1,9)
            $txn = rand(111111111111, 999999999999) . '----' . $pdf_byte_range; //$pdf_byte_range signiture space location
            $ts = date('Y-m-d\TH:i:s');
            // $doc_info = FILE_NAME;
            $xmlstr = '<Esign AuthMode="1" aspId="' . ASPID . '" ekycId="" ekycIdType="A" responseSigType="pkcs7" responseUrl="' . base_url() . 'index.php/' . ESIGN_RESPONSE_URL_V2 . '?param=' . $getParams_encoded . '" sc="y" ts="' . $ts . '" txn="' . $txn . '" ver="2.1"><Docs><InputHash docInfo="' . $txn . '" hashAlgorithm="SHA256" id="1">' . $file_hash . '</InputHash></Docs></Esign>';
            $doc->loadXML($xmlstr); //parser
            // Create a new Security object 
            $objDSig = new RobRichards\XMLSecLibs\XMLSecurityDSig();
            // Use the c14n exclusive canonicalization
            $objDSig->setCanonicalMethod(RobRichards\XMLSecLibs\XMLSecurityDSig::C14N);
            // Sign using SHA-256
            $objDSig->addReference(
                $doc,
                RobRichards\XMLSecLibs\XMLSecurityDSig::SHA1,
                array('http://www.w3.org/2000/09/xmldsig#enveloped-signature'),
                array('force_uri' => true)
            );
            // Create a new (private) Security key
            $objKey = new RobRichards\XMLSecLibs\XMLSecurityKey(RobRichards\XMLSecLibs\XMLSecurityKey::RSA_SHA1, array('type' => 'private'));
            //If key has a passphrase, set it using
            $objKey->passphrase = '';
            // Load the private key
            $objKey->loadKey(PRIVATEKEY, TRUE);
            // Sign the XML file
            $objDSig->sign($objKey);
            // Append the signature to the XML
            $objDSig->appendSignature($doc->documentElement);
            $signXML = $doc->saveXML();
            $signXML = str_replace('<?xml version="1.0"?>', '', $signXML);
            ob_end_clean();
            $data['esign_request'] = $signXML;
            $data['txn_id'] = $txn;
            $data['esign_url'] = ESIGN_URL;
            echo json_encode(['status' => 200, 'data' => $data]);
        }
    }
    public function esignResponseNew()
    {
        $getParams = $_GET['param'];
        $params = json_decode(openssl_decrypt(base64_decode(urldecode($getParams)), "AES-128-CTR", "singleENCRYPT", 0, '1234567893032221'));
        $unsigned_file_path = ESIGN_TMP_DIR . 'unsigned-' . $params->file_name_wo_ext . '.pdf';
        $signed_file_path = $params->file_path;

        $errMsg = "";
        $xmldata = (array) simplexml_load_string(filter_input(INPUT_POST, 'eSignResponse')) or die("Failed to load");
        if ($xmldata["@attributes"]["errCode"] != 'NA') {
            $errCode = $xmldata["@attributes"]["errCode"];
            if (isset($xmldata["@attributes"]["errMsg"])) {
                $msg = $xmldata["@attributes"]["errMsg"];
                $errMsg = $msg;
            } else {
                $msg = 'eSign Request Cancelled.[#' . $errCode . ']';
                $errMsg = $msg;
            }
        }
        if ($errMsg) {
            log_message("error", 'invalid signed pdf ');
            $this->load->view('esign/error');
            return;
        } else {
            // header('Content-Type: application/pdf');
            $unsigned_file = file_get_contents($unsigned_file_path);
            if ($unsigned_file === false) {
                log_message("error", 'could not save the signed map in ilrms server ');
                $this->load->view('esign/error');
                return;
            }
            $txn = $xmldata["@attributes"]["txn"];
            $txn_array = explode('----', $txn);
            $pdf_byte_range = $txn_array[1];

            $pkcs7 = (array) $xmldata['Signatures'];
            $pkcs7_value = $pkcs7['DocSignature'];
            $cer_value = $xmldata['UserX509Certificate'];


            $beginpem = "-----BEGIN CERTIFICATE-----\n";
            $endpem = "-----END CERTIFICATE-----\n";
            $pemdata = $beginpem . trim($cer_value) . "\n" . $endpem;

            $cert_data = openssl_x509_parse($pemdata);

            if($params->o_pref != '') {
                $pdf = new TCPDF($params->o_pref, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            else {
                $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            }
            // $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, false, 'ISO-8859-1', false);

            $file = $pdf->my_output($signed_file_path, 'F', $unsigned_file, $cer_value, $pkcs7_value, true, $pdf_byte_range);
            $pdf->_destroy();
            if (file_exists($unsigned_file_path)) {
                unlink($unsigned_file_path);
            }
            // header_remove('Content-Type');
            // header('Content-Type: text/html');
            $this->esignSuccessNew($params, $xmldata);
        }
    }
    public function esignSuccessNew($params, $xmldata)
    {
        $sign_name = $params->sign_name;

        $dist_code = $params->dist_code;
        $subdiv_code = $params->subdiv_code;
        $cir_code = $params->cir_code;
        $proposal_no = $params->proposal_no;
        $user_code = $params->user_code;
        $co_note = $params->co_note;
        $to_user = $params->to_user;
        $case_nos_arr = (array) $params->case_nos_arr;

        $auth_sess = json_decode($params->auth_sess, true);
        $this->session->set_userdata($auth_sess);
        
        $this->dbswitch($dist_code);
        if ($sign_name == 'nc_proposal') {
            $is_exists = $this->db->get_where('nc_village_proposal', ['proposal_no' => $proposal_no])->num_rows();
            $this->db->trans_begin();
            if ($is_exists) {
                $this->db->where('proposal_no', $proposal_no)
                    ->update('nc_village_proposal', array(
                        'user_code' => $user_code,
                        'dist_code' => $dist_code,
                        'subdiv_code' => $subdiv_code,
                        'user_type' => 'CO',
                        'sign_key' => json_encode($xmldata),
                        'updated_at' => date('Y-m-d H:i:s'),
                        'status' => 'A'
                    ));
            } else {
                $this->db->insert('nc_village_proposal', array(
                    'proposal_no' => $proposal_no,
                    'user_code' => $user_code,
                    'dist_code' => $dist_code,
                    'subdiv_code' => $subdiv_code,
                    'cir_code' => $cir_code,
                    'user_type' => 'CO',
                    'sign_key' => json_encode($xmldata),
                    'updated_at' => date('Y-m-d H:i:s'),
                    'created_at' => date('Y-m-d H:i:s'),
                    'status' => 'A'
                ));

                $lastid = $this->db->insert_id();

                $this->db->where('dist_code', $dist_code)
                    ->where('subdiv_code', $subdiv_code)
                    ->where('cir_code', $cir_code)
                    ->where('status', 'O')
                    ->where_in('application_no', $case_nos_arr)
                    ->update('nc_villages', array('status' => 'G', 'co_proposal' => 'Y', 'proposal_id' => $lastid));
            }
            if ($this->db->trans_status() === false) {
                $this->db->trans_rollback();
                log_message("error", 'NC_Village_CO_PROPOSAL_Update: ' . json_encode('#NCPROP0001 Unable to update data.'));
                $this->load->view('esign/error');
            } else {
                if($auth_sess['user_desig_code'] == 'CO'){
                    if(count($case_nos_arr) > 0){
                        for($i=0; $i<count($case_nos_arr); $i++){
                            $nc_village = $this->db->query("SELECT * FROM nc_villages WHERE application_no='".$case_nos_arr[$i]."'")->row();
                            $nc_village->dist_code;
                            $url = API_LINK_ILRMS . "index.php/nc_village_v2/NcCommonController/insertNcVillageDetails";
                            $method = 'POST';
                            $update_data = [ 
                                                'proccess_type' => 'FORWARD', 
                                                'dist_code' => $nc_village->dist_code,
                                                'subdiv_code' => $nc_village->subdiv_code,
                                                'cir_code' => $nc_village->cir_code,
                                                'mouza_pargona_code' => $nc_village->mouza_pargona_code,
                                                'lot_no' => $nc_village->lot_no,
                                                'vill_townprt_code' => $nc_village->vill_townprt_code,
                                                'uuid' => $nc_village->uuid,
                                                'pre_user' => $this->session->userdata('user_code'), 
                                                'cur_user' => $to_user, 
                                                'pre_user_dig' => 'CO', 
                                                'cur_user_dig' => 'DC', 
                                                'remark' => $co_note,
                                                'application_no' => $case_nos_arr[$i],
                                                'proposal_no' => $proposal_no,
                                                'proceeding_type' => 1,
                                            ];

                            $output = $this->NcVillageModel->callApiV2($url, $method, $update_data);
                            // $response = $output ? json_decode($output, true) : [];
                        }
                    }
                }

                $this->db->trans_commit();
                $data['file_path'] = base_url() . NC_VILLAGE_PROPOSAL_DIR . 'co/' . $proposal_no . '.pdf';
                $this->load->view('esign/view_signed_pdf', $data);
            }
        } else if ($sign_name == 'nc_map_sign') {
            $nc_map_id = $params->nc_map_id;
            $nc_village_id = $params->nc_village_id;
            $mainfile = file_get_contents($params->file_path);
            $pdfbase = base64_encode($mainfile);
            if ($pdfbase) {
                $url = API_LINK_ILRMS . "index.php/nc_village_v2/NcCommonController/storeSignedMap";
                $method = 'POST';
                $data = ['id' => $nc_map_id, 'sign_key' => json_encode($xmldata), 'pdfbase' => $pdfbase];
                $output = callIlrmsApi($url, $method, $data);
                $output = true;
                if (!$output) {
                    log_message("error", 'could not save the signed map in ilrms server ');
                    $this->load->view('esign/error');
                } else {
                    $nc_village = $this->db->where('id', $nc_village_id)->get('nc_villages')->row();
                    $dc = $this->getDc($nc_village->dist_code, $user_code);
                    $dc_name = 'DC';
                    if(count($dc)){
                        $dc_name = $dc['name'];
                    }

                    $url = API_LINK_ILRMS . "index.php/nc_village_v2/NcCommonController/insertNcVillageDetails";
                    $method = 'POST';
                    $update_data = [ 
                                        'proccess_type' => 'SIGN_MAP', 
                                        'dist_code' => $nc_village->dist_code,
                                        'subdiv_code' => $nc_village->subdiv_code,
                                        'cir_code' => $nc_village->cir_code,
                                        'mouza_pargona_code' => $nc_village->mouza_pargona_code,
                                        'lot_no' => $nc_village->lot_no,
                                        'vill_townprt_code' => $nc_village->vill_townprt_code,
                                        'uuid' => $nc_village->uuid,
                                        'only_for_log' => 'Y', 
                                        'pre_user' => $user_code, 
                                        'cur_user' => $user_code, 
                                        'pre_user_dig' => 'DC', 
                                        'cur_user_dig' => 'DC', 
                                        'remark' => $dc_name . ' signed the map'
                                    ];
                    $output = $this->NcVillageModel->callApiV2($url, $method, $update_data);

                    $data['file_path'] = base_url()  . 'index.php/nc_village_v2/NcVillageDcController/viewUploadedMap?id=' . $nc_map_id;
                    // $data['file_path'] = false;
                    $this->load->view('esign/view_signed_pdf', $data);
                }
            } else {
                log_message("error", 'could not fetch the signed map');
                $this->load->view('esign/error');
            }
        }
    }

    /** Get DC */
    protected function getDc($dist_code, $user_code){        
        $url = base_url("index.php/nc_village_v2/NcVillageApiV2Controller/get_user");
        $method = 'POST';
        $data['desig_code'] = 'DC';
        $data['dist_code'] = $dist_code;
        $data['user_code'] = $user_code;
        $output = $this->NcVillageModel->callApiV2($url, $method, $data);
        
        if (!$output) {
            log_message("error", 'FAIL TO FETCH DC');
            return [];
        }else{
            $resp = json_decode($output, true);
            if($resp['success']){
                return $resp['user'];
            }
        }

        return [];
    }
}
